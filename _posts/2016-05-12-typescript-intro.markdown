---
layout: post
title:  "Introducci칩n a TypeScript"
date:   2016-05-12 12:32:10
categories: typescript
lvl: intro
comments: true
description: "TypeScript es un 'superset' de JavaScript que a침ade ciertas funcionalidades a nuestro c칩digo, como tipos de dato definidos e interfaces. Angular 2 est치 hecho en TypeScript, por lo tanto vale la pena aprender un poco. Esta gu칤a est치 dirigida a personas que no han pasado por lenguajes como Java o C# (para ellos esto de TypeScript resulta muy familiar)."
image: https://cloud.githubusercontent.com/assets/7959823/15593025/0f57a2c8-236e-11e6-9670-eced2b4bc0cd.png
---


TypeScript es un 'superset' de JavaScript que a침ade ciertas funcionalidades a nuestro c칩digo como, tipos de dato definidos e interfaces. Angular 2 est치 hecho en TypeScript, por lo tanto vale la pena aprender un poco y ver de que se trata, lo m치s probable es que en el futuro cercano se popularice.

## Funcionamiento

B치sicamente funciona as칤:

1. Creas un archivo de texto con extensi칩n `ts` _miAplicacion.ts_
1. Escribes c칩digo en el formato de TypeScript dentro de tu archivo
1. Compilas tu archivo usando el compilador de TypeScript
1. Se genera un archivo con extensi칩n `js` _miAplicacion.js_


## Setup

Existen [varios plugins para TypeSctipt](https://www.typescriptlang.org/index.html#download-links), en este ejemplo lo usaremos directamente desde node:

`$ npm install -g typescript`


### Ejecutando el compilador de TypeScript

Tras instalar TypeScript tendremos disponible en nuestra terminal el programa `tsc`, TypeScript Compiler, con el comando:

`$ tsc nombreDelArchivo.ts --watch`

Le decimos a TypeScript Compiler que compile `nombreDelArchivo.ts` a `nombreDelArchivo.js`. As칤 mismo con el par치metro `--watch` le decimos que est칠 atento a cualquier cambio y realice la compilaci칩n en cada caso.


## Tipos

Empecemos por lo m치s _Type_ de TypeScript, _Strong Typing_ o "tipado fuerte" (o estricto):

Si tenemos la siguiente funci칩n en JavaScript de toda la vida:


```js
let alertar = (mensaje) => {
  alert(mensaje);
}
```


TypeScript nos permite definir tipos estrictos:

Podemos llamar a la funci칩n `alertar` y pasar cualquier valor como mensaje. Sin embargo, tiene m치s sentido que la funci칩n reciba 칰nicamente cadenas de texto (_strings_):


```js
let alertar = (mensaje: string) => {
  alert(mensaje);
}
```


Y eso es todo. Como te podr치s imaginar si se quieren otros tipos de datos como n칰meros o valores _booleanos_ tan solo hay que reemplazarlo sobre el _string_ que usamos:


```js
let alertar = (mensaje: number) => {
  alert(mensaje);
}

// o

let alertar = (mensaje: boolean) => {
  alert(mensaje);
}
```


Incluso podemos definir valores con _union types_ para hacer que estos reciban m치s de un solo tipo de dato:


```js
let alertar = (mensaje: string | number) => {
  alert(mensaje);
}
```

Podemos ser incluso m치s flexibles y definir valores con el tipo _any_;


```js
let alertar = (mensaje: any) => {
  alert(mensaje);
}
```


De esta forma volvemos al ejemplo inicial con JavaScript de toda la vida en donde nuestra funci칩n recibe cualquier tipo de dato.


## Interfaces

Una _interfaz_ nos permite modelar la forma de un objeto:


```js
interface Zapato {
  marca: string,
  numero: number,
  deprotivo: boolean
}
```


Ahora podemos definir un objeto y especificar que debe tener la forma de `Zapato`, es decir, **extender** la _interfaz_.


Usando el ejemplo anterior con la funci칩n `alertar` limitamos el tipo del mensaje para validar que concuerde con la estructura que se define en la _interfaz_ `Zapato`:


```js
interface Zapato {
  marca: string,
  numero: number,
  deprotivo: boolean
}

let alertar = (mensaje: Zapato) => {
  alert(mensaje);
}

alertar({marca: 'Patito', numero: 42, deprotivo: true});
```


Si pasaramos un argumento de m치s o nos faltara uno, TypeScript nos lo har치 saber con un error.


Podemos tener propiedades opcionales dentro de una _interfaz_:


```js
interface ITelefono {
  marca: string,
  precio: number,
  nfc: boolean,
  ranurasParaSIMCard?: number
}
```


Aqu칤 podemos pasar un n칰mero en la propiedad `ranurasParaSIMCard` o no pasar un valor en absoluto. Algo a notar tambi칠n es que en este ejemplo defin칤 la _interfaz_ como `I` `NombreDeLaInterfaz`, esta nomenclatura suele encontrarse en Internet y es eso, s칩lo una forma de escribir los nombres de las interfaces.

Finalmente, cabe notar que la _interfaz_ por s칤 sola no hace nada en nuestro c칩digo final (js), es 칰nicamente una restricci칩n que establecemos durante el desarrollo de nuestro c칩digo TypeScript. Si intentaramos compilar la definici칩n de la _interfaz_ terminar칤amos con un archivo JavaScript vac칤o.


## Ejemplo

Ahora s칤 llegamos al ejemplo que tanto esperabas (游뗷): c칩digo que integra lo que hemos visto hasta ahora. Este ejemplo usa el concepto de clases, si no lo tienes muy claro puedes visitar la [documentaci칩n de Mozilla para este tema](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Classes).

```js
interface IPokemon {
    nombre: string,
    sonido: string,
    dormido?: boolean
}

class Pokemon {
  
  pokemon;
    
  get (){
    return this.pokemon;
  }

  set (nuevoPokemon){
    this.pokemon = nuevoPokemon;
  }
  
  hacerHablar() {
    if (this.pokemon.dormido){
      console.log('Zzzzz');
    }else{
      console.log(this.pokemon.sonido);
    }
  }

  constructor(nuevoPokemon: IPokemon) {
    this.set(nuevoPokemon);
  }
}


let pikachu = new Pokemon({ nombre: "Pikachu", sonido: "춰Pika pika!" });

pikachu.hacerHablar();

let snorlax = new Pokemon({ nombre: "Snorlax", sonido: "Snoooor-laax", dormido: true });

snorlax.hacerHablar();
```

1. Definimos una _interfaz_ con una propiedad opcional
1. Definimos una clase que tiene:
    1. Una referencia a un objeto _principal_
    1. Un m칠todo _getter_ para consultar nuestro objeto _principal_
    1. Un m칠todo para escribir nuestro objeto _principal_
    1. Un m칠todo para ejecutar una acci칩n
    1. Un constructor que:
        1. Recibe como par치metro un objeto que debe tener la forma especificada por la _interfaz_
        1. Invoca al m칠todo _set_ para escribir el objeto _principal_
1. Una instancia de la clase
1. La invocaci칩n del m칠todo destinado a ejecutar una acci칩n
1. Una instancia de la clase
1. La invocaci칩n del m칠todo destinado a ejecutar una acci칩n


Repo: [https://github.com/UnJavaScripter/typescript-basics](https://github.com/UnJavaScripter/typescript-basics)